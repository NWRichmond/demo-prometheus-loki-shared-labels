services:
  # Sample app that will generate both metrics and logs
  demo-app:
    image: nginx:alpine
    ports:
      - "8080:80"
    labels:
      app: "demo-app"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

  # Prometheus scraper
  prometheus:
    image: prom/prometheus:v3.2.1
    ports:
      - "9098:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"

  # Loki for logs
  loki:
    image: grafana/loki:3.4.2
    ports:
      - "3108:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki-config.yml:/etc/loki/config.yml
      - ./loki-rules:/loki/rules
      - loki_data:/loki
    user: root # Temporary fix for permissions

  # Promtail to ship logs to Loki
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml

  # Test traffic generator
  traffic-gen:
    image: alpine:latest
    command: >
      /bin/sh -c "while true; do 
        wget -q -O- http://demo-app:80/api/users;
        wget -q -O- http://demo-app:80/api/orders;
        sleep $$(( RANDOM % 5 + 1 ));
      done"
    depends_on:
      - demo-app

volumes:
  prometheus_data:
  loki_data:
